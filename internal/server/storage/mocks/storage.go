// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/storage/interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kupriyanovkk/gophkeeper/internal/server/model"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserStorage) Create(ctx context.Context, user model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserStorageMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserStorage)(nil).Create), ctx, user)
}

// Get mocks base method.
func (m *MockUserStorage) Get(ctx context.Context, user model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, user)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserStorageMockRecorder) Get(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserStorage)(nil).Get), ctx, user)
}

// Update mocks base method.
func (m *MockUserStorage) Update(ctx context.Context, user model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserStorageMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserStorage)(nil).Update), ctx, user)
}

// MockPrivateStorage is a mock of PrivateStorage interface.
type MockPrivateStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateStorageMockRecorder
}

// MockPrivateStorageMockRecorder is the mock recorder for MockPrivateStorage.
type MockPrivateStorageMockRecorder struct {
	mock *MockPrivateStorage
}

// NewMockPrivateStorage creates a new mock instance.
func NewMockPrivateStorage(ctrl *gomock.Controller) *MockPrivateStorage {
	mock := &MockPrivateStorage{ctrl: ctrl}
	mock.recorder = &MockPrivateStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateStorage) EXPECT() *MockPrivateStorageMockRecorder {
	return m.recorder
}

// CreatePrivateData mocks base method.
func (m *MockPrivateStorage) CreatePrivateData(ctx context.Context, private model.PrivateData) (model.PrivateData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateData", ctx, private)
	ret0, _ := ret[0].(model.PrivateData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateData indicates an expected call of CreatePrivateData.
func (mr *MockPrivateStorageMockRecorder) CreatePrivateData(ctx, private interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateData", reflect.TypeOf((*MockPrivateStorage)(nil).CreatePrivateData), ctx, private)
}

// DeletePrivateData mocks base method.
func (m *MockPrivateStorage) DeletePrivateData(ctx context.Context, private model.PrivateData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateData", ctx, private)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrivateData indicates an expected call of DeletePrivateData.
func (mr *MockPrivateStorageMockRecorder) DeletePrivateData(ctx, private interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateData", reflect.TypeOf((*MockPrivateStorage)(nil).DeletePrivateData), ctx, private)
}

// GetPrivateData mocks base method.
func (m *MockPrivateStorage) GetPrivateData(ctx context.Context, private model.PrivateData) (model.PrivateData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateData", ctx, private)
	ret0, _ := ret[0].(model.PrivateData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateData indicates an expected call of GetPrivateData.
func (mr *MockPrivateStorageMockRecorder) GetPrivateData(ctx, private interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateData", reflect.TypeOf((*MockPrivateStorage)(nil).GetPrivateData), ctx, private)
}

// GetPrivateDataByType mocks base method.
func (m *MockPrivateStorage) GetPrivateDataByType(ctx context.Context, privateType model.PrivateDataType, user model.User) ([]model.PrivateData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateDataByType", ctx, privateType, user)
	ret0, _ := ret[0].([]model.PrivateData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateDataByType indicates an expected call of GetPrivateDataByType.
func (mr *MockPrivateStorageMockRecorder) GetPrivateDataByType(ctx, privateType, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateDataByType", reflect.TypeOf((*MockPrivateStorage)(nil).GetPrivateDataByType), ctx, privateType, user)
}

// UpdatePrivateData mocks base method.
func (m *MockPrivateStorage) UpdatePrivateData(ctx context.Context, private model.PrivateData, isForce bool) (model.PrivateData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivateData", ctx, private, isForce)
	ret0, _ := ret[0].(model.PrivateData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivateData indicates an expected call of UpdatePrivateData.
func (mr *MockPrivateStorageMockRecorder) UpdatePrivateData(ctx, private, isForce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivateData", reflect.TypeOf((*MockPrivateStorage)(nil).UpdatePrivateData), ctx, private, isForce)
}
